/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module reset (
  input A,
  input B,
  input P1,
  input P2,
  input CLK,
  output RST,
  output RSTP
);
  wire s0;
  wire RST_temp;
  // RESET
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( CLK ),
    .Q( RST_temp ),
    .\~Q ( RSTP )
  );
  assign s0 = ((RST_temp & A & P1) | (RST_temp & A & B) | (A & ~ B & P1 & P2) | (~ B & ~ P1 & RST_temp) | (~ B & ~ A & RST_temp));
  assign RST = RST_temp;
endmodule

module mux1 (
  input A,
  input B,
  input R,
  input P1,
  input P2,
  output [1:0] MX1
);
  assign MX1[0] = ((~ A & B & R) | (A & ~ B & P1 & ~ P2) | (A & ~ B & ~ P1));
  assign MX1[1] = ((A & ~ B & ~ P1) | (A & ~ B & P2));
endmodule

module mux2 (
  input A,
  input B,
  input P1,
  input P2,
  output [1:0] MX2
);
  wire s0;
  wire s1;
  assign s1 = ~ B;
  assign s0 = (A & s1 & ~ P1);
  assign MX2[0] = (s0 | (A & s1 & ~ P2));
  assign MX2[1] = (s0 | (A & s1 & P2));
endmodule

module controller (
  input [3:0] DATA,
  input DA,
  input CLK,
  output [1:0] MUX1,
  output [1:0] MUX2
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire s15;
  wire s16;
  wire s17;
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( CLK ),
    .Q( s1 ),
    .\~Q ( s2 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s3 ),
    .C( CLK ),
    .Q( s4 ),
    .\~Q ( s5 )
  );
  assign s0 = ((s1 & DA) | s4);
  assign s3 = (s2 & DA & s5);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s6 ),
    .C( CLK ),
    .Q( s7 ),
    .\~Q ( s8 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s9 ),
    .C( CLK ),
    .Q( s10 ),
    .\~Q ( s11 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i4 (
    .sel( s12 ),
    .in_0( s13 ),
    .in_1( DATA ),
    .out( s14 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i5 (
    .D( s14 ),
    .C( CLK ),
    .Q( s13 )
  );
  reset reset_i6 (
    .A( s7 ),
    .B( s10 ),
    .P1( s15 ),
    .P2( s16 ),
    .CLK( CLK ),
    .RST( s17 )
  );
  assign s6 = (s7 ^ s10);
  assign s9 = ((s7 | (s4 & (s11 & s8))) & s11);
  assign s12 = (s10 & s8);
  assign s15 = (s13[3] & s13[2] & s13[1]);
  assign s16 = s13[0];
  mux1 mux1_i7 (
    .A( s7 ),
    .B( s10 ),
    .R( s17 ),
    .P1( s15 ),
    .P2( s16 ),
    .MX1( MUX1 )
  );
  mux2 mux2_i8 (
    .A( s7 ),
    .B( s10 ),
    .P1( s15 ),
    .P2( s16 ),
    .MX2( MUX2 )
  );
endmodule

module register4bit (
  input [3:0] \D[3:0] ,
  input CLK,
  output [3:0] \Q[3:0] 
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  assign s0 = \D[3:0] [0];
  assign s2 = \D[3:0] [1];
  assign s3 = \D[3:0] [2];
  assign s4 = \D[3:0] [3];
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( CLK ),
    .Q( s1 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s2 ),
    .C( CLK ),
    .Q( s5 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s3 ),
    .C( CLK ),
    .Q( s6 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s4 ),
    .C( CLK ),
    .Q( s7 )
  );
  assign \Q[3:0] [0] = s1;
  assign \Q[3:0] [1] = s5;
  assign \Q[3:0] [2] = s6;
  assign \Q[3:0] [3] = s7;
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module fulladder (
  input A,
  input B,
  input Cin,
  output Cout,
  output SUM
);
  wire s0;
  assign s0 = (A ^ B);
  assign SUM = (s0 ^ Cin);
  assign Cout = ((A & B) | (s0 & Cin));
endmodule

module \4bitadder  (
  input [3:0] A,
  input [3:0] B,
  input Cin,
  output Cout,
  output [3:0] SUM
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  assign s0 = A[0];
  assign s1 = A[1];
  assign s2 = A[2];
  assign s3 = A[3];
  assign s4 = B[0];
  assign s5 = B[1];
  assign s6 = B[2];
  assign s7 = B[3];
  fulladder fulladder_i0 (
    .A( s0 ),
    .B( s4 ),
    .Cin( Cin ),
    .Cout( s12 ),
    .SUM( s8 )
  );
  fulladder fulladder_i1 (
    .A( s1 ),
    .B( s5 ),
    .Cin( s12 ),
    .Cout( s13 ),
    .SUM( s9 )
  );
  fulladder fulladder_i2 (
    .A( s2 ),
    .B( s6 ),
    .Cin( s13 ),
    .Cout( s14 ),
    .SUM( s10 )
  );
  fulladder fulladder_i3 (
    .A( s3 ),
    .B( s7 ),
    .Cin( s14 ),
    .Cout( Cout ),
    .SUM( s11 )
  );
  assign SUM[0] = s8;
  assign SUM[1] = s9;
  assign SUM[2] = s10;
  assign SUM[3] = s11;
endmodule

module BCDadder (
  input [3:0] A,
  input [3:0] B,
  input Cin,
  output Cout,
  output [3:0] SUM
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire [3:0] s3;
  \4bitadder  \4bitadder_i0 (
    .A( A ),
    .B( B ),
    .Cin( Cin ),
    .Cout( s1 ),
    .SUM( s0 )
  );
  assign s2 = ((s0[2] & s0[3]) | (s0[1] & s0[3]) | s1);
  assign s3[0] = 1'b0;
  assign s3[1] = s2;
  assign s3[2] = s2;
  assign s3[3] = 1'b0;
  \4bitadder  \4bitadder_i1 (
    .A( s0 ),
    .B( s3 ),
    .Cin( 1'b0 ),
    .Cout( Cout ),
    .SUM( SUM )
  );
endmodule

module calculator (
  input [3:0] DATA,
  input DA,
  input CLK,
  output [3:0] D0,
  output [3:0] D1,
  output [3:0] D2,
  output [3:0] D3,
  output [3:0] D4,
  output [3:0] D5,
  output [3:0] D6,
  output [3:0] D7
);
  wire [3:0] D0_temp;
  wire [3:0] D1_temp;
  wire [3:0] D2_temp;
  wire [3:0] D3_temp;
  wire [3:0] D4_temp;
  wire [3:0] D5_temp;
  wire [3:0] D6_temp;
  wire [3:0] D7_temp;
  wire [3:0] s0;
  wire [1:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  wire [3:0] s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire [3:0] s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [1:0] s27;
  wire [3:0] s28;
  wire [3:0] s29;
  wire [3:0] s30;
  wire [3:0] s31;
  wire [3:0] s32;
  wire [3:0] s33;
  wire [3:0] s34;
  wire [3:0] s35;
  wire [3:0] s36;
  wire [3:0] s37;
  wire [3:0] s38;
  wire [3:0] s39;
  wire [3:0] s40;
  wire [3:0] s41;
  wire [3:0] s42;
  wire [3:0] s43;
  wire [3:0] s44;
  wire [3:0] s45;
  wire [3:0] s46;
  wire [3:0] s47;
  wire [3:0] s48;
  wire [3:0] s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  controller controller_i0 (
    .DATA( DATA ),
    .DA( DA ),
    .CLK( CLK ),
    .MUX1( s1 ),
    .MUX2( s27 )
  );
  assign s2[0] = 1'b0;
  assign s2[1] = 1'b0;
  assign s2[2] = 1'b0;
  assign s2[3] = 1'b0;
  assign s5[0] = 1'b0;
  assign s5[1] = 1'b0;
  assign s5[2] = 1'b0;
  assign s5[3] = 1'b0;
  assign s8[0] = 1'b0;
  assign s8[1] = 1'b0;
  assign s8[2] = 1'b0;
  assign s8[3] = 1'b0;
  assign s11[0] = 1'b0;
  assign s11[1] = 1'b0;
  assign s11[2] = 1'b0;
  assign s11[3] = 1'b0;
  assign s14[0] = 1'b0;
  assign s14[1] = 1'b0;
  assign s14[2] = 1'b0;
  assign s14[3] = 1'b0;
  assign s17[0] = 1'b0;
  assign s17[1] = 1'b0;
  assign s17[2] = 1'b0;
  assign s17[3] = 1'b0;
  assign s20[0] = 1'b0;
  assign s20[1] = 1'b0;
  assign s20[2] = 1'b0;
  assign s20[3] = 1'b0;
  assign s23[0] = 1'b0;
  assign s23[1] = 1'b0;
  assign s23[2] = 1'b0;
  assign s23[3] = 1'b0;
  assign s28[0] = 1'b0;
  assign s28[1] = 1'b0;
  assign s28[2] = 1'b0;
  assign s28[3] = 1'b0;
  assign s49[0] = 1'b0;
  assign s49[1] = 1'b0;
  assign s49[2] = 1'b0;
  assign s49[3] = 1'b0;
  assign s31[0] = 1'b0;
  assign s31[1] = 1'b0;
  assign s31[2] = 1'b0;
  assign s31[3] = 1'b0;
  assign s34[0] = 1'b0;
  assign s34[1] = 1'b0;
  assign s34[2] = 1'b0;
  assign s34[3] = 1'b0;
  assign s37[0] = 1'b0;
  assign s37[1] = 1'b0;
  assign s37[2] = 1'b0;
  assign s37[3] = 1'b0;
  assign s40[0] = 1'b0;
  assign s40[1] = 1'b0;
  assign s40[2] = 1'b0;
  assign s40[3] = 1'b0;
  assign s43[0] = 1'b0;
  assign s43[1] = 1'b0;
  assign s43[2] = 1'b0;
  assign s43[3] = 1'b0;
  assign s46[0] = 1'b0;
  assign s46[1] = 1'b0;
  assign s46[2] = 1'b0;
  assign s46[3] = 1'b0;
  register4bit register4bit_i1 (
    .\D[3:0] ( s0 ),
    .CLK( CLK ),
    .\Q[3:0] ( D0_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i2 (
    .sel( s1 ),
    .in_0( D0_temp ),
    .in_1( s2 ),
    .in_2( s3 ),
    .in_3( DATA ),
    .out( s0 )
  );
  register4bit register4bit_i3 (
    .\D[3:0] ( s4 ),
    .CLK( CLK ),
    .\Q[3:0] ( D1_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i4 (
    .sel( s1 ),
    .in_0( D1_temp ),
    .in_1( s5 ),
    .in_2( s6 ),
    .in_3( D0_temp ),
    .out( s4 )
  );
  register4bit register4bit_i5 (
    .\D[3:0] ( s7 ),
    .CLK( CLK ),
    .\Q[3:0] ( D2_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i6 (
    .sel( s1 ),
    .in_0( D2_temp ),
    .in_1( s8 ),
    .in_2( s9 ),
    .in_3( D1_temp ),
    .out( s7 )
  );
  register4bit register4bit_i7 (
    .\D[3:0] ( s10 ),
    .CLK( CLK ),
    .\Q[3:0] ( D3_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i8 (
    .sel( s1 ),
    .in_0( D3_temp ),
    .in_1( s11 ),
    .in_2( s12 ),
    .in_3( D2_temp ),
    .out( s10 )
  );
  register4bit register4bit_i9 (
    .\D[3:0] ( s13 ),
    .CLK( CLK ),
    .\Q[3:0] ( D4_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i10 (
    .sel( s1 ),
    .in_0( D4_temp ),
    .in_1( s14 ),
    .in_2( s15 ),
    .in_3( D3_temp ),
    .out( s13 )
  );
  register4bit register4bit_i11 (
    .\D[3:0] ( s16 ),
    .CLK( CLK ),
    .\Q[3:0] ( D5_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i12 (
    .sel( s1 ),
    .in_0( D5_temp ),
    .in_1( s17 ),
    .in_2( s18 ),
    .in_3( D4_temp ),
    .out( s16 )
  );
  register4bit register4bit_i13 (
    .\D[3:0] ( s19 ),
    .CLK( CLK ),
    .\Q[3:0] ( D6_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i14 (
    .sel( s1 ),
    .in_0( D6_temp ),
    .in_1( s20 ),
    .in_2( s21 ),
    .in_3( D5_temp ),
    .out( s19 )
  );
  register4bit register4bit_i15 (
    .\D[3:0] ( s22 ),
    .CLK( CLK ),
    .\Q[3:0] ( D7_temp )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i16 (
    .sel( s1 ),
    .in_0( D7_temp ),
    .in_1( s23 ),
    .in_2( s24 ),
    .in_3( D6_temp ),
    .out( s22 )
  );
  register4bit register4bit_i17 (
    .\D[3:0] ( s25 ),
    .CLK( CLK ),
    .\Q[3:0] ( s26 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i18 (
    .sel( s27 ),
    .in_0( s26 ),
    .in_1( s28 ),
    .in_2( s6 ),
    .in_3( s26 ),
    .out( s25 )
  );
  register4bit register4bit_i19 (
    .\D[3:0] ( s29 ),
    .CLK( CLK ),
    .\Q[3:0] ( s30 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i20 (
    .sel( s27 ),
    .in_0( s30 ),
    .in_1( s31 ),
    .in_2( s9 ),
    .in_3( s30 ),
    .out( s29 )
  );
  register4bit register4bit_i21 (
    .\D[3:0] ( s32 ),
    .CLK( CLK ),
    .\Q[3:0] ( s33 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i22 (
    .sel( s27 ),
    .in_0( s33 ),
    .in_1( s34 ),
    .in_2( s12 ),
    .in_3( s33 ),
    .out( s32 )
  );
  register4bit register4bit_i23 (
    .\D[3:0] ( s35 ),
    .CLK( CLK ),
    .\Q[3:0] ( s36 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i24 (
    .sel( s27 ),
    .in_0( s36 ),
    .in_1( s37 ),
    .in_2( s15 ),
    .in_3( s36 ),
    .out( s35 )
  );
  register4bit register4bit_i25 (
    .\D[3:0] ( s38 ),
    .CLK( CLK ),
    .\Q[3:0] ( s39 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i26 (
    .sel( s27 ),
    .in_0( s39 ),
    .in_1( s40 ),
    .in_2( s18 ),
    .in_3( s39 ),
    .out( s38 )
  );
  register4bit register4bit_i27 (
    .\D[3:0] ( s41 ),
    .CLK( CLK ),
    .\Q[3:0] ( s42 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i28 (
    .sel( s27 ),
    .in_0( s42 ),
    .in_1( s43 ),
    .in_2( s21 ),
    .in_3( s42 ),
    .out( s41 )
  );
  register4bit register4bit_i29 (
    .\D[3:0] ( s44 ),
    .CLK( CLK ),
    .\Q[3:0] ( s45 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i30 (
    .sel( s27 ),
    .in_0( s45 ),
    .in_1( s46 ),
    .in_2( s24 ),
    .in_3( s45 ),
    .out( s44 )
  );
  register4bit register4bit_i31 (
    .\D[3:0] ( s47 ),
    .CLK( CLK ),
    .\Q[3:0] ( s48 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i32 (
    .sel( s27 ),
    .in_0( s48 ),
    .in_1( s49 ),
    .in_2( s3 ),
    .in_3( s48 ),
    .out( s47 )
  );
  BCDadder BCDadder_i33 (
    .A( D0_temp ),
    .B( s48 ),
    .Cin( 1'b0 ),
    .Cout( s50 ),
    .SUM( s3 )
  );
  BCDadder BCDadder_i34 (
    .A( D1_temp ),
    .B( s26 ),
    .Cin( s50 ),
    .Cout( s51 ),
    .SUM( s6 )
  );
  BCDadder BCDadder_i35 (
    .A( D2_temp ),
    .B( s30 ),
    .Cin( s51 ),
    .Cout( s52 ),
    .SUM( s9 )
  );
  BCDadder BCDadder_i36 (
    .A( D3_temp ),
    .B( s33 ),
    .Cin( s52 ),
    .Cout( s53 ),
    .SUM( s12 )
  );
  BCDadder BCDadder_i37 (
    .A( D4_temp ),
    .B( s36 ),
    .Cin( s53 ),
    .Cout( s54 ),
    .SUM( s15 )
  );
  BCDadder BCDadder_i38 (
    .A( D5_temp ),
    .B( s39 ),
    .Cin( s54 ),
    .Cout( s55 ),
    .SUM( s18 )
  );
  BCDadder BCDadder_i39 (
    .A( D6_temp ),
    .B( s42 ),
    .Cin( s55 ),
    .Cout( s56 ),
    .SUM( s21 )
  );
  BCDadder BCDadder_i40 (
    .A( D7_temp ),
    .B( s45 ),
    .Cin( s56 ),
    .SUM( s24 )
  );
  assign D0 = D0_temp;
  assign D1 = D1_temp;
  assign D2 = D2_temp;
  assign D3 = D3_temp;
  assign D4 = D4_temp;
  assign D5 = D5_temp;
  assign D6 = D6_temp;
  assign D7 = D7_temp;
endmodule
