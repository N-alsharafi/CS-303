/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module cntDECu (
  input CLK,
  input LOAD0,
  input CE,
  output [3:0] CNT,
  output EQ9
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire EQ9_temp;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( CLK ),
    .Q( s1 ),
    .\~Q ( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s3 ),
    .C( CLK ),
    .Q( s4 ),
    .\~Q ( s5 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s6 ),
    .C( CLK ),
    .Q( s7 ),
    .\~Q ( s8 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s9 ),
    .C( CLK ),
    .Q( s10 ),
    .\~Q ( s11 )
  );
  Mux_2x1 Mux_2x1_i4 (
    .sel( CE ),
    .in_0( s1 ),
    .in_1( s2 ),
    .out( s12 )
  );
  assign s14 = (s1 & CE);
  assign s13 = ~ ((EQ9_temp & CE) | LOAD0);
  assign s0 = (s12 & s13);
  Mux_2x1 Mux_2x1_i5 (
    .sel( s14 ),
    .in_0( s4 ),
    .in_1( s5 ),
    .out( s15 )
  );
  assign s18 = (s4 & s14);
  assign CNT[0] = s1;
  assign CNT[1] = s4;
  assign CNT[2] = s10;
  assign CNT[3] = s7;
  assign EQ9_temp = (s1 & ~ s4 & ~ s10 & s7);
  assign s3 = (s15 & s13);
  Mux_2x1 Mux_2x1_i6 (
    .sel( s18 ),
    .in_0( s10 ),
    .in_1( s11 ),
    .out( s16 )
  );
  assign s19 = (s10 & s18);
  assign s9 = (s16 & s13);
  Mux_2x1 Mux_2x1_i7 (
    .sel( s19 ),
    .in_0( s7 ),
    .in_1( s8 ),
    .out( s17 )
  );
  assign s6 = (s17 & s13);
  assign EQ9 = EQ9_temp;
endmodule

module tally (
  input clk,
  input reset,
  input button,
  output [3:0] t10,
  output [3:0] t1
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  assign s10 = ~ button;
  assign s11 = ~ reset;
  cntDECu cntDECu_i0 (
    .CLK( clk ),
    .LOAD0( s0 ),
    .CE( s1 ),
    .CNT( t10 ),
    .EQ9( s2 )
  );
  cntDECu cntDECu_i1 (
    .CLK( clk ),
    .LOAD0( s1 ),
    .CE( s3 ),
    .CNT( t1 ),
    .EQ9( s4 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s5 ),
    .C( clk ),
    .Q( s6 ),
    .\~Q ( s7 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s8 ),
    .C( clk ),
    .Q( s3 ),
    .\~Q ( s9 )
  );
  assign s8 = (s7 & s9 & s10);
  assign s5 = (s10 & (s6 ^ s3));
  assign s0 = ((s4 & s2 & s3) | s11);
  assign s1 = ((s3 & s4) | s11);
endmodule
